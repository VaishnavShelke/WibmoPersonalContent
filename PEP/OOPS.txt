Inheritance
Polymorphism
Abstraction
Encapsulation
Coupling
Cohesion
Association
Aggregation
Composition


Can we overload the main method?
A Java Constructor returns a value but, what?
Can we create a program without main method?
What are the six ways to use this keyword?
Why is multiple inheritance not supported in Java?
Why use aggregation?
Can we override the static method?
What is the covariant return type?
What are the three usages of Java super keyword?
Why use instance initializer block?
What is the usage of a blank final variable?
What is a marker or tagged interface?
What is runtime polymorphism or dynamic method dispatch?
What is the difference between static and dynamic binding?
How downcasting is possible in Java?
What is the purpose of a private constructor?
What is object cloning
Structs
Access Modifiers
non-access modifiers, such as static, abstract, synchronized, native, volatile, transient
Interface,Abstract,Defaukt Method
Final Keyword (On Valriables ,Methods,class, parameter)
// Polymorphism
Super keyword-> this : child :: super : parent | overriding the override
Runtime polymorphism cannot be achieved on data members
openâ€“closed principle (OCP) 
Operator ovelrloading in java| Strings+Number
If you overload a static method in Java, it is the example of compile time polymorphism | static polymorphism | UpcastingIn Java, when you declare a method in a class, it's automatically virtual unless you use the final keyword to make it non-overridable or static to make it a class (rather than an instance) method. 
// Inhertiance
Single ,Multilevel, Hierarchical, Multiple, Hybrid
Java Supports  multiple inheritance only through interfaces,
While interfaces can't have regular fields, you can achieve a similar effect by using constant values, which are implicitly public, static, and final
Violation of Encapsulation: Inheritance exposes the implementation details of the parent class to its subclasses.
So in Java, overloading works across scopes, contrary to C++
Overload and hide methods in Java
// Encapsulation
 If you are creating class, you are doing encapsulation.
 Encapsulation simply means binding object state(fields) and behaviour(methods) together.
// Abstraction


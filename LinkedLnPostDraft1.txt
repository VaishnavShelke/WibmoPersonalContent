Recruiter Message:



	
Hi Ma'am,
	I am Vaishnav Shelke (NIT Nagpur,Undergrad From Class of 2022), a Java Backend Engineer at PayU-Wibmo, which is a card payment processing arm of PayU. 
	
	There is an opening in your firm, and I am very much intested in applying for it.
	I have build applications from scratch out of which one was a part of Big Billion Days Sale 2023, designed to handle upto 310 transactions per second.

	To compensate for the missing job-related knowledge, I undertook a personal project.
	
	Where I gained hands-on experience from ideation to code deployment on the cloud while creating a product that converts game assets of titles like PUBG and Call of Duty into NFTs on the Ethereum blockchain.
	
	You can check this out by visiting https://www.linkedin.com/feed/update/urn:li:activity:7127229803505598464/.
	It felt like launching a mini-enterprise, and I believe this experience will make me a better fit for the software engineer role at Zeta.
	
	If you find me fit for your company please refer me for the position.

	
Application For:
	Job URL : https://jobs.lever.co/zeta/e349641f-4b62-48fc-a8d8-230c2844e537
	Role : Software Developement Engineer 1 
	Company : Zeta
	Posted Date : 10-11-2023

Thank You For Your Time ðŸ™Œ.	
	
https://github.com/VaishnavShelke/Whatsapp-Analyser
	
Hi There,
	I've developed a small-scale solution that transfers NFTs and fungible tokens for a player's in-game assets in web2 games such as Call of Duty (COD) and PlayerUnknown's Battlegrounds (PUBG) to the player's Ethereum account.
	
	When a player earns a collectible in Call of Duty, such as a gun, they can obtain a corresponding token in their Ethereum account through game, which has to integrate with this solution.
	
	In any future player-to-player token asset transactions, the game will earn a commission in Ether for each trade. 
	
	This approach is intended to reduce reliance on external marketplaces like Steam Valve and mitigate the high fees that game developers must contend with on platforms like the Google Play Store and the iOS App Store for in-app purchases.
	
	The only prerequisite is that the player must have their blockchain address stored in their browser extension's Metamask wallet.
	
	This is a two step process,
	1. The player verifies his account ownership by signing the one-time password generated by the game using the private keys associated with his wallet.
	2. Upon successful authentication, the game triggers a transfer of a single item unit on the blockchain by interacting with a smart contract that maintains ownership records for various items.
	
	

1. CTReq (Create Token Request) :
	The game requests the "TokenMint Server" to initiate a token transfer, including asset, quantity, and OTP. The server validates the request and generates a redirection URL for user authentication. This URL and payload are sent as a "CTRes" (Create Token Response). The game locks the item in the user's account until the transaction outcome is determined.
3. 1st Redirect:
	On recieving the redirectionUrl in CTRes the game loads the webpage corresponding to redirectionUrl.
4. Load UI Request: 
	The redirection URL calls the "TokenMint UI Server" to load player and transaction info, receiving a "Load UI Response."
6. Auth Req (Authentication Request): 
	Once the user connects their MetaMask wallet, signs the OTP with the private key, an Authentication Request is sent to "TokenMint UI" for ownership verification, and an Authentication Response is returned to the webpage.
9. 2nd Redirection:
	After successful or failed user verification, a "Return Back To Game" button appears, allowing users to close the TokenMint UI page and redirect to the "Game Landing Page" (in this case, the login page).
10. OVReq (OTP Verification Status Request):
	A request for OTP verification status is sent to the "TokenMint Server," which responds with an OTP Verification Response (11) to confirm the receipt of the OVReq.
12. TTReq :
	After completing the OVReq and OVRes calls, the TokenMint Server prepares a payload for TTReq (Transfer Token Request) to the "Smart Contract Interface." This payload includes:

	a. Smart Contract Address
	b. Smart Contract Operator Address
	c. Initial owner's address of all tokens (one of the game's addresses)
	d. Recipient's Ethereum address (the player's)
	e. Token ID set in the smart contract corresponding to the item
	f. Quantity of the item
	g. Data field (Transaction ID generated in CTReq call)

	The smart contract responds with a 200 OK response as TTRes (Transfer Token Response).
14. TrReq :
	In this call, the Smart Contract creates a wallet for the Operator Address received in TTReq. It fetches the private key corresponding to the operator address from an environment variable. Then, the Smart Contract Interface establishes a connection with the smart contract using the "Alchemy Provider" and invokes the "safeTransfer()" function of the smart contract to facilitate the transfer. It's important to note that the Operator Address is responsible for paying the gas fees for this transaction.
15. SMList :
	Once the TrReq request is made, the transaction is initiated, which may take a few seconds to a few minutes to be executed on the blockchain. All nodes need to validate and mine a block before the transaction becomes a permanent part of the blockchain.

	After the block containing our transaction is mined, the smart contract logs the custom message we included when deploying it on the blockchain. This message is delivered to the Smart Contract Interface through a WebSocket provided by "Alchemy," which listens to the smart contract's deployment address.

	From this message, we extract the "data field" (which is the Transaction ID generated in the CTReq call). The transaction request is successful, and the message, along with the "TransactionHash" and "BlockNumber," is forwarded to the TokenMint Server.
16. BlockListener :
	The successful transaction request message is forwarded to the TokenMint Server as a "BlockListenReq," along with the "TransactionHash" and "BlockNumber."
17. TSStatusReq:
	When OTP verification fails in Request 10, this request notifies the game about the failure.

	When the transaction on the blockchain is successful, the request informs the game about the success, including the Transaction Receipt and the Smart Contract Address.
	
	
	Welcome to this presentation where we delve into the mechanics of the Ethereum blockchain. If you've ever found cryptocurrencies and blockchain technology perplexing, don't worry â€“ you're not alone. In fact, I was in the same boat until I embarked on my previous blockchain project. The experience of realizing that these concepts can be quite challenging to grasp inspired me to create these slides, with the aim of making Ethereum more accessible and comprehensible for all.


		